// frontend/src/pages/HomePage.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import ProductCard from '../components/ProductCard';
import CategoryBar from '../components/CategoryBar';
import PromoCarousel from '../components/PromoCarousel'; // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å
import './HomePage.css';

const API_BASE_URL = "/api/";

const HomePage = () => {
    // --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
    const [banners, setBanners] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤
    const [categories, setCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [nextPage, setNextPage] = useState(null);
    const observer = useRef();
    const { totalItems } = useCart();

    // 2. –≠–§–§–ï–ö–¢ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –í–°–ï–• –î–ê–ù–ù–´–• –ü–†–ò –°–¢–ê–†–¢–ï
    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
        axios.get(`${API_BASE_URL}banners/`)
            .then(response => setBanners(response.data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–æ–≤:", error));

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        axios.get(`${API_BASE_URL}categories/`)
            .then(response => setCategories(response.data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error));
    }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ fetchProducts, useEffect –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, lastProductElementRef –∏ —Ç.–¥. –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    const fetchProducts = useCallback((reset = false) => {
        setLoading(true);
        let url = nextPage;
        if (reset) {
            const categoryParam = selectedCategory ? `&category_id=${selectedCategory}` : '';
            url = `${API_BASE_URL}products/?page=1${categoryParam}`;
        }
        if (!url) {
            setLoading(false);
            return;
        }
        axios.get(url)
            .then(response => {
                setProducts(prev => reset ? response.data.results : [...prev, ...response.data.results]);
                setNextPage(response.data.next);
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:", error))
            .finally(() => setLoading(false));
    }, [nextPage, selectedCategory]);

    useEffect(() => {
        setProducts([]);
        setNextPage(null);
        fetchProducts(true);
    }, [selectedCategory]);

    const lastProductElementRef = useCallback(node => {
        if (loading) return;
        if (observer.current) observer.current.disconnect();
        observer.current = new IntersectionObserver(entries => {
            if (entries[0].isIntersecting && nextPage) {
                fetchProducts(false);
            }
        });
        if (node) observer.current.observe(node);
    }, [loading, nextPage, fetchProducts]);

    const handleSelectCategory = (categoryId) => {
        setSelectedCategory(categoryId);
    };

    return (
        <div className="home-page">
            {/* 3. –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É */}
            <PromoCarousel banners={banners} />

            <CategoryBar
                categories={categories}
                selectedCategory={selectedCategory}
                onSelectCategory={handleSelectCategory}
            />

            <div className="products-grid">
                {products.map((product, index) => (
                    <Link to={`/product/${product.id}`} key={product.id} className="product-link">
                        <div ref={products.length === index + 1 ? lastProductElementRef : null}>
                            <ProductCard product={product} />
                        </div>
                    </Link>
                ))}
            </div>

            {loading && (
                <div className="products-grid">
                    {[...Array(4)].map((_, i) => <div key={`skeleton-${i}`} className="skeleton-card"></div>)}
                </div>
            )}

            {!nextPage && !loading && products.length === 0 && <div className="no-products-message">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</div>}

            {totalItems > 0 && (
                <Link to="/cart" className="cart-fab">
                    üõí
                    <span className="cart-fab-badge">{totalItems}</span>
                </Link>
            )}
        </div>
    );
};

export default HomePage;